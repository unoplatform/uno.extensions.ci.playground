name: Build Windows
description: ""

inputs:
  package-id:
    description: 'Compiled Package ID'
    required: true
    default: 'release_Windows'
  project-to-build:
    description: 'Relative path to .csproj file'
    required: true
    default: ''
  project-folder:
    description: 'csproj folder'
    required: true
    default: ''    
  project-platform:
    description: 'Platform to build'
    required: false
    default: 'x86'
  artifact-retention-policy: 
    description: 'Number of days to keep the build artifacts'
    required: false
    default: '90'
  # *** [REQUIRED FOR GENERATING SIGNED .MSIX PACKAGE] ***
  #For Creating a valid PFX certificate:
  # 1.- Open a new powershell terminal as administrator and use this command: New-SelfSignedCertificate -DnsName {YOURCERT.NAME.COM} -CertStoreLocation cert:\LocalMachine\My
  # 2.-When Finished press Win + R and type  certlm.msc. Then go to Personal folder -> Certificates and you should be able to see your previously created certificate
  # 3.-Double Click it then go to Details tab. Click on the bottom right button 'Copy to file'. A wizard will open
  # 4.-On first page Click Next 
  #   -> Second page click "Yes, Export the private key" 
  #   -> Third page select third option "PKCS #12 (.PFX)" and click on Next 
  #   -> In Fourth page (Security) set a password for the certificate and click on Next
  #   -> In last page please set a Name for the certificate and select where to put it. Use a simple location like C:\
  # 5.-Last part consists in converting the .pfx certificate to Base64 format. For doing that please navigate to the path where you exported the certificate (C:\ in this example) and open a Powershell terminal as administrator, then use this command: [convert]::ToBase64String((Get-Content -path "C:\{YOUR_PFX_FILE.pfx}" -Encoding byte))
  # 6.-After that you will be able to see the Base64 string in the terminal output. Now you can copy that string and create a new Encrypted Secret in your repository and then use it as variable value. 
  # See how to create an encrypted secret in here:https://docs.github.com/es/actions/security-guides/encrypted-secrets
  certificate: 
     description: "Base64 Certificate for signing .Msix package. Required if 'sign-package': 'true'"
     required: false
     default: ''
  sign-package: 
     description: "Defines if final .msix package will be signed using certificate input"
     required: false
     default: 'false'
  publish-artifacts: 
     description: "If true, compilation artifacts will be published and put under Job Summary section"
     required: false
     default: 'true'               
runs:
  using: "composite"
  steps:
    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.9
      with:
        versionSpec: '5.x'

    - name: GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.9
      with:
        useConfigFile: true
        configFilePath: ./.github/workflows/config/gitversion.yml

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2      

    - name: Restore the application
      shell: pwsh
      run: msbuild /t:Restore ${{ inputs.project-to-build }} /p:Configuration=Release /p:Platform=${{ inputs.project-platform }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      shell: pwsh
      run: |
        if ('true' -eq '${{ inputs.sign-package }}') {
          Write-Host "Decoding pfx certificate"
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ inputs.certificate }}")
          $certificatePath = "${{ inputs.package-id }}_TemporaryKey.pfx"
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        }

    # Create the app package by building and packaging the project
    - name: Build and Create Package
      shell: pwsh
      run:  |
        if ('true' -eq '${{ inputs.sign-package }}') {
          msbuild ${{ inputs.project-to-build }} /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=${{ inputs.package-id }}_TemporaryKey.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
        }else{
          msbuild ${{ inputs.project-to-build }} /p:AppxPackageSigningEnabled=false /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
        }

        $finalPackageFolder = ".\artifacts${{ inputs.package-id }}"
        Write-Host "Creating package folder: $finalPackageFolder"
        New-Item -ItemType Directory -Force -Path $finalPackageFolder

        if ('true' -eq '${{ inputs.publish-artifacts }}') {
          Write-Host "Compressing final package"
          Copy-Item -Path '${{ inputs.project-folder }}\bin\Release${{ inputs.package-id }}\*' -Destination ".\artifacts${{ inputs.package-id }}" -recurse -Force  
        } 
      
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir:  .\bin\Release${{ inputs.package-id }}\
        Configuration: Release
        Platform: ${{ inputs.project-platform }}

    # Remove the pfx
    - name: Remove the pfx
      shell: pwsh
      run: |
        if ('true' -eq '${{ inputs.sign-package }}') {
          Remove-Item -path ${{ inputs.package-id }}_TemporaryKey.pfx
        }

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: "${{ inputs.package-id }}(${{ inputs.project-platform }})_${{ steps.gitversion.outputs.assemblySemVer }}" 
        path: .\artifacts${{ inputs.package-id }}
        retention-days: ${{ inputs.artifact-retention-policy }}