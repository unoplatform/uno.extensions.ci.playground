name: Build Windows
description: ""

inputs:
  package-id:
    description: 'Compiled Package ID'
    required: true
    default: 'release_Windows'
  project-to-build:
    description: 'Relative path to .csproj file'
    required: true
    default: ''
  project-folder:
    description: 'csproj folder'
    required: true
    default: ''    
  project-platform:
    description: 'Platform to build'
    required: false
    default: 'x86'
  artifact-retention-policy: 
    description: 'Number of days to keep the build artifacts'
    required: false
    default: '90'
  # *** [REQUIRED FOR GENERATING SIGNED .MSIX PACKAGE] ***
  #For Creating a valid PFX certificate for signing:
  # 1.- Open VisualStudio and create a new empty Windows Universal project
  # 2.- Open solution explorer and double click on Package.appxmanifest file 
  # 3.- Now you should see a bunch of tabs. Select the last one (Packaging)
  # 4.- Fill the editor field and click on "Select Certificate" and a new popup should open
  # 5.- Click on "Create" and a second popup should open
  # 6.- Make sure the "Editor Name" field is correct and DO NOT put any password
  # 7.- Scroll down and click on "Ok" and second popup will close
  # 8.- Click on "Ok" again. At this point you should see in solution explorer the new certificate: "TemporaryKey.pfx"
  # 9.- Last part consists in uploading the new pfx certificate to your pipeline secure storage. See more details here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops
  certificate: 
     description: "Base64 Certificate for signing .Msix package. Required if 'sign-package': 'true'"
     required: false
     default: ''
  sign-package: 
     description: "Defines if final .msix package will be signed using certificate input"
     required: false
     default: 'false'
  publish-artifacts: 
     description: "If true, compilation artifacts will be published and put under Job Summary section"
     required: false
     default: 'true'               
runs:
  using: "composite"
  steps:
    - name: Verify required parameters
      shell: pwsh
      run: |
            $errors = ''
            if ('' -eq '${{ inputs.project-to-build }}') { $errors = $errors + '[project-to-build] is not valid.' + "`r`n"  }
            if ('true' -eq '${{ inputs.sign-package }}'){
              if ('' -eq '${{ inputs.certificate }}') { $errors = $errors + '[certificate] is not valid. Please make sure the name of the .pfx certificate is correct and it exists in secure files' + "`r`n"  }
            }

            if (-not ([string]::IsNullOrEmpty($errors))){
                $errors
                throw "Some required parameters are missing"
            }

    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.9
      with:
        versionSpec: '5.x'

    - name: GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.9
      with:
        useConfigFile: true
        configFilePath: ./.github/workflows/config/gitversion.yml

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2      

    - name: Restore the application
      shell: pwsh
      run: msbuild /t:Restore ${{ inputs.project-to-build }} /p:Configuration=Release /p:Platform=${{ inputs.project-platform }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      shell: pwsh
      run: |
        if ('true' -eq '${{ inputs.sign-package }}') {
          Write-Host "Decoding pfx certificate"
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ inputs.certificate }}")
          $certificatePath = "${{ inputs.package-id }}_TemporaryKey.pfx"
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        }

    # Create the app package by building and packaging the project
    - name: Build and Create Package
      shell: pwsh
      run:  |
        $projectFolder = '${{ inputs.project-folder }}'
        if (('' -eq '$projectFolder') -and ("${{ inputs.project-to-build }}" -contains "/")){
          Write-Host "Adjusting proj folder"
          $projectFolder = "${{ inputs.project-to-build }}".SubString(0, "${{ inputs.project-to-build }}".LastIndexOf('/'))
        }
        
        Write-Host "Current proj folder is: $projectFolder"

        if ('true' -eq '${{ inputs.sign-package }}') {
          msbuild ${{ inputs.project-to-build }} /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=${{ inputs.package-id }}_TemporaryKey.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
        }else{
          msbuild ${{ inputs.project-to-build }} /p:AppxPackageSigningEnabled=false /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
        }

        $finalPackageFolder = ".\artifacts"
        Write-Host "Creating package folder: $finalPackageFolder"
        New-Item -ItemType Directory -Force -Path $finalPackageFolder

        if ('true' -eq '${{ inputs.publish-artifacts }}') {
          Copy-Item -Path $projectFolder\bin\Release\* -Destination ".\artifacts" -recurse -Force  
        } 
      
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir:  .\bin\Release\
        Configuration: Release
        Platform: ${{ inputs.project-platform }}

    # Remove the pfx
    - name: Remove the pfx
      shell: pwsh
      run: |
        if ('true' -eq '${{ inputs.sign-package }}') {
          Remove-Item -path ${{ inputs.package-id }}_TemporaryKey.pfx
        }

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: "${{ inputs.package-id }}(${{ inputs.project-platform }})_${{ steps.gitversion.outputs.assemblySemVer }}" 
        path: .\artifacts
        retention-days: ${{ inputs.artifact-retention-policy }}