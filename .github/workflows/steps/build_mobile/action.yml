name: Build Mobile
description: ""

inputs:
  package-id:
    description: 'Compiled Package ID'
    required: true
    default: 'release_Mobile'
  project-to-build:
    description: 'Relative path to .csproj file'
    required: true
    default: ''
  project-folder:
    description: 'csproj folder'
    required: true
    default: ''        
  artifact-retention-policy: 
    description: 'Number of days to keep the build artifacts'
    required: false
    default: '90'
  target-framework: 
    description: 'Target framework (net6.0-android, net6.0-ios, net6.0-maccatalyst)'
    required: true
    default: 'net6.0-android'    
  certificate: 
     description: "Base64 Certificate for signing .apk/.ipa package"
     required: true    
runs:
  using: "composite"
  steps:
    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.9
      with:
        versionSpec: '5.x'

    - name: GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.9
      with:
        useConfigFile: true
        configFilePath: ./.github/workflows/config/gitversion.yml

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      shell: pwsh
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ inputs.certificate }}")
        $certificatePath = "${{ inputs.package-id }}_TemporaryKey.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the project
    - name: Build and create package
      shell: pwsh
      run: |
        if ('net6.0-android' -eq '$target-framework') {
          Write-Host  ""
          Write-Host "Building ${{ inputs.package-id }}"

          dotnet publish  -c Release -p:TargetFramework=${{ inputs.target-framework }}  -o .\bin\Release\ ${{ inputs.project-to-build }}
          /p:AndroidSigningKeyStore=${{ inputs.package-id }}_TemporaryKey.pfx /p:AndroidSigningKeyAlias=${{ inputs.package-id }}_TemporaryKey
        }

        Get-ChildItem -Recurs

        $finalPackageFolder = ".\artifacts"
        Write-Host "Creating package folder: $finalPackageFolder"
        New-Item -ItemType Directory -Force -Path $finalPackageFolder

        Get-ChildItem -Recurs

        $finalPackageName = "$finalPackageFolder\${{ inputs.package-id }}_${{ steps.gitversion.outputs.assemblySemVer }}.zip"
        Write-Host "Compressing final package: $finalPackageName"
        Compress-Archive -Path '.\bin\Release\*' -DestinationPath $finalPackageName

    # Remove the pfx
    - name: Remove the pfx
      shell: pwsh
      run: Remove-Item -path ${{ inputs.package-id }}_TemporaryKey.pfx

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: "${{ inputs.package-id }}_${{ steps.gitversion.outputs.assemblySemVer }}" 
        path: |
          .\artifacts\**\*.aab
          .\artifacts\**\*.apk
        retention-days: ${{ inputs.artifact-retention-policy }}