name: Build Android
description: ""

inputs:
  package-id:
    description: 'Compiled Package ID'
    required: true
    default: 'release_Mobile'
  project-to-build:
    description: 'Relative path to .csproj file'
    required: true
    default: ''   
  project-folder:
    description: 'csproj folder'
    required: true
    default: ''        
  artifact-retention-policy: 
    description: 'Number of days to keep the build artifacts'
    required: false
    default: '90'
  certificate: 
     description: "Base64 Certificate for signing .ipa package."
     required: true    
     default: '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'
  certificate-password: 
     description: "Certificate password."
     required: true      
     default: 'contoso'
  provisioning-profile: 
     description: "Base64 provisioning profile"
     required: true
     default: ''
  keychain-password: 
     description: "New keychain password. This can be a random string value"
     required: false
     default: 'KEYCHAIN_PASSWORD'      
  publish-artifacts: 
     description: "If true, compilation artifacts will be published and put under Job Summary section"
     required: false
     default: 'true' 

runs:
  using: "composite"
  steps:
    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.9
      with:
        versionSpec: '5.x'

    - name: GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.9
      with:
        useConfigFile: true
        configFilePath: ./.github/workflows/config/gitversion.yml

    - name: Set XCode Version
      if: runner.os == 'macOS'
      shell: bash
      run: |
        sudo xcode-select -s "/Applications/Xcode_14.1.app"
        echo "MD_APPLE_SDK_ROOT=/Applications/Xcode_14.1.app" >> $GITHUB_ENV
        
    - name: Install the Apple certificate and provisioning profile
      shell: bash
      env:
        BUILD_CERTIFICATE_BASE64: ${{ inputs.certificate }}
        P12_PASSWORD: ${{ inputs.certificate-password }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ inputs.provisioning-profile }}
        KEYCHAIN_PASSWORD: ${{ inputs.keychain-password }}
      run: |
          echo -n "create variables"
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "import certificate and provisioning profile from secrets"
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          echo -n "create temporary keychain"
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          echo -n "import certificate to keychain"
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          echo -n "apply provisioning profile"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
    # Create the app package by building and packaging the project
    - name: Build and create package
      shell: pwsh
      run: |
        dotnet publish  -c Release -p:RuntimeIdentifier='ios-arm64' -p:CodesignProvision='EnviosDev2022' -p:CodesignKey=' Patricio Valdes (752234A22L)' -p:TargetFramework=net6.0-ios /p:ArchiveOnBuild=true  -o .\bin\Release${{ inputs.package-id }}\ ${{ inputs.project-to-build }} 

        $finalPackageFolder = ".\artifacts${{ inputs.package-id }}"
        Write-Host "Creating package folder: $finalPackageFolder"
        New-Item -ItemType Directory -Force -Path $finalPackageFolder

        if ('true' -eq '${{ inputs.publish-artifacts }}') {
          Write-Host "Compressing final package"
          Copy-Item -Path '.\bin\Release${{ inputs.package-id }}\*' -Destination ".\artifacts${{ inputs.package-id }}" -recurse -Force  
        }

        tree Demo.Mobile

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: "${{ inputs.package-id }}_${{ steps.gitversion.outputs.assemblySemVer }}" 
        path: .\artifacts${{ inputs.package-id }}\
        retention-days: ${{ inputs.artifact-retention-policy }}

        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: "${{ inputs.package-id }}_${{ steps.gitversion.outputs.assemblySemVer }}" 
        path: ${{ inputs.project-folder }}\bin\Release${{ inputs.package-id }}\
        retention-days: ${{ inputs.artifact-retention-policy }}